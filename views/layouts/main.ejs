
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <link rel="preconnect" href="https://fonts.gstatic.com">
   <link href="https://fonts.googleapis.com/css2?family=Source+Sans+Pro:wght@400;700&display=swap" rel="stylesheet">
   <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.1/css/all.min.css" >
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css">
        <link rel='stylesheet' type='text/css' href='https://api.tomtom.com/maps-sdk-for-web/cdn/6.x/6.1.2-public-preview.24/maps/maps.css'>
    <link rel='stylesheet' type='text/css' href='./assets/ui-library/index.css'/>
    <link rel='stylesheet' type='text/css' href='./assets/ui-library/icons-css/routing.css'/>
    <link rel='stylesheet' type='text/css' href='https://api.tomtom.com/maps-sdk-for-web/cdn/plugins/SearchBox/3.1.6-public-preview.3//SearchBox.css'/>
    <script src='https://api.tomtom.com/maps-sdk-for-web/cdn/plugins/SearchBox/3.1.6-public-preview.3//SearchBox-web.js'></script>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>

    <link rel="stylesheet" href="css/style.css">
    <title>Zupco Bus Tracking System</title>
  
</head>
<style>
        #foldable {
            width: 320px;
        }
        #form {
            margin-top: 10px;
        }
        .icon {
            background-size: cover;
            height: 30px;
            width: 30px;
        }
        .tt-icon-size {
            height: 18px !important;
            padding: 8px;
            width: 18px !important;
        }
        .icon-spacing-right {
            margin-right: 12px;
            margin-top: 22px;
        }
        .icon-spacing-left {
            margin-left: 12px;
            margin-top: 24px;
        }
        .tt-search-box-input {
            width: calc(100% - 25px) !important;
        }
        .searchbox-container {
            display: flex;
        }

        .searchbox-container > .tt-search-box {
            flex: 1;
            padding-right: 26px;
        }
        .my-location-button {
            background-image: url("./assets/svg/my-location.svg");
            cursor: pointer;
            margin-left: 7px;
            padding: 12px;
        }
        .my-location-button:hover {
            background-image: url("./assets/svg/my-location-hover.svg");
        }
        .route-marker {
            align-items: center;
            background-color: #4a90e2;
            border: solid 3px #2faaff;
            border-radius: 50%;
            display: flex;
            height: 32px;
            justify-content: center;
            transition: width .1s, height .1s;
            width: 32px;
        }
        .marker-icon {
            background-position: center;
            background-size: 22px 22px;
            border-radius: 50%;
            height: 22px;
            left: 4px;
            position: absolute;
            text-align: center;
            top: 3px;
            transform: rotate(45deg);
            width: 22px;
        }
        .marker {
            height: 30px;
            width: 30px;
        }
        .marker-content {
            background: #c30b82;
            border-radius: 50% 50% 50% 0;
            height: 30px;
            left: 50%;
            margin: -15px 0 0 -15px;
            position: absolute;
            top: 50%;
            transform: rotate(-45deg);
            width: 30px;
        }
        .marker-content::before {
            background: #ffffff;
            border-radius: 50%;
            content: "";
            height: 24px;
            margin: 3px 0 0 3px;
            position: absolute;
            width: 24px;
        }

    
.overlay-close {
position: fixed;
bottom: 10%;
left: 50%;
z-index: 10;
padding: 1em 2.5em;
background: #fff;
border: 1px solid #fff;
border-radius: 4px;
color: #222;
font-size: 16px;
text-align: center;
cursor: pointer;
opacity: 0;
visibility: hidden;
transition: .2s ease-in-out;
transform: translate(-50%, -50%);
}
.overlay-close.is-open {
opacity: 1;
visibility: visible;
}
.overlay-close:hover {
background: transparent;
color: #fff;
}

.overlay01 {
position: fixed;
top: 0;
left: 0;
z-index: 2;
width: 100%;
height: 100%;
background: rgba(0, 0, 0, .7);
opacity: 0;
visibility: hidden;
transition: .3s linear;
}
.overlay01.is-open {
opacity: 1;
visibility: visible;
}
#loading-wrapper {
  position: fixed;
  width: 100%;
  height: 100%;
  left: 0;
  top: 0;
}

#loading-text {
  display: block;
  position: absolute;
  top: 50%;
  left: 50%;
  color: #999;
  width: 100px;
  height: 30px;
  margin: -7px 0 0 -45px;
  text-align: center;
  font-family: 'PT Sans Narrow', sans-serif;
  font-size: 20px;
}

#loading-content {
  display: block;
  position: relative;
  left: 50%;
  top: 50%;
  width: 170px;
  height: 170px;
  margin: -85px 0 0 -85px;
  border: 3px solid #F00;
}

#loading-content:after {
  content: "";
  position: absolute;
  border: 3px solid #0F0;
  left: 15px;
  right: 15px;
  top: 15px;
  bottom: 15px;
}

#loading-content:before {
  content: "";
  position: absolute;
  border: 3px solid #00F;
  left: 5px;
  right: 5px;
  top: 5px;
  bottom: 5px;
}

#loading-content {
  border: 3px solid transparent;
  border-top-color: #4D658D;
  border-bottom-color: #4D658D;
  border-radius: 50%;
  -webkit-animation: loader 2s linear infinite;
  -moz-animation: loader 2s linear infinite;
  -o-animation: loader 2s linear infinite;
  animation: loader 2s linear infinite;
}

#loading-content:before {
  border: 3px solid transparent;
  border-top-color: #D4CC6A;
  border-bottom-color: #D4CC6A;
  border-radius: 50%;
  -webkit-animation: loader 3s linear infinite;
    -moz-animation: loader 2s linear infinite;
  -o-animation: loader 2s linear infinite;
  animation: loader 3s linear infinite;
}

#loading-content:after {
  border: 3px solid transparent;
  border-top-color: #84417C;
  border-bottom-color: #84417C;
  border-radius: 50%;
  -webkit-animation: loader 1.5s linear infinite;
  animation: loader 1.5s linear infinite;
    -moz-animation: loader 2s linear infinite;
  -o-animation: loader 2s linear infinite;
}

@-webkit-keyframes loaders {
  0% {
    -webkit-transform: rotate(0deg);
    -ms-transform: rotate(0deg);
    transform: rotate(0deg);
  }
  100% {
    -webkit-transform: rotate(360deg);
    -ms-transform: rotate(360deg);
    transform: rotate(360deg);
  }
}

@keyframes loader {
  0% {
    -webkit-transform: rotate(0deg);
    -ms-transform: rotate(0deg);
    transform: rotate(0deg);
  }
  100% {
    -webkit-transform: rotate(360deg);
    -ms-transform: rotate(360deg);
    transform: rotate(360deg);
  }
}

#content-wrapper {
  color: #FFF;
  position: fixed;
  left: 0;
  top: 20px;
  width: 100%;
  height: 100%;
}

#header
{
  width: 800px;
  margin: 0 auto;
  text-align: center;
  height: 100px;
  background-color: #666;
}

#content
{
  width: 800px;
  height: 1000px;
  margin: 0 auto;
  text-align: center;
  background-color: #888;
}        
</style>
<body>
<!-- Header -->
<header>
     <nav class="navbar navbar-expand-lg navbar-dark bg-primary fixed-top">
    <div class="container">
        <a class="navbar-brand" href="#">Zupco Bus Tracking System</a>
        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarColor02"
            aria-controls="navbarColor02" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>

    </div>
</nav>
   </header>
   <div class="container" style="padding-top:30px;margin-top:30px;">
    <div class="col"><h2>Choose Your Route</h2> </div><div id="first"> </div>
   
</div>     
<div id='map' class='map container' style="max-height:400px;">
    <div id='foldable' class='tt-overlay-panel -left-top -medium js-foldable'>
        <form id=form>
            <div id='startSearchBox' class='searchbox-container'>
                <div class='tt-icon tt-icon-size icon-spacing-right -start'></div>
            </div>
            <div id='finishSearchBox' class='searchbox-container'>
                <div class='tt-icon tt-icon-size icon-spacing-right -finish'></div>
            </div>
        </form>
    </div>
</div>

   <%- body %>
    <script src='https://api.tomtom.com/maps-sdk-for-web/cdn/6.x/6.1.2-public-preview.24/maps/maps-web.min.js'></script>
    <script src='https://api.tomtom.com/maps-sdk-for-web/cdn/6.x/6.1.2-public-preview.24/services/services-web.min.js'></script>
    <script data-showable type='text/javascript' src='./assets/js/mobile-or-tablet.js'></script>
    <script data-showable type='text/javascript' src='./assets/js/info-hint.js'></script>
    <script data-showable type='text/javascript' src='./assets/js/search/searchbox-enter-submit.js'></script>
	<script data-showable type='text/javascript' src='./assets/js/foldable.js'></script>
	<script src="http://ajax.googleapis.com/ajax/libs/jquery/1.11.0/jquery.min.js"></script>
    <script>
        var cordLat=0;
        var cordLon=0;
        var condition1 = 0;
        var element = document.createElement('strong');
		var distance;
		var fee = 500;
		var dest_name;
		var dest_addr;
        var map = tt.map({
            key: 'jy6IpLAs3aODBterwGy1XccsJ8Bp3n9N',
            container: 'map',
            dragPan: !window.isMobileOrTablet(),
            center: [31, -17.8],
            zoom: 8
        });
        map.addControl(new tt.FullscreenControl());
        map.addControl(new tt.NavigationControl());
        new Foldable('#foldable', 'top-right');

        var bounds = new tt.LngLatBounds();

        function createMarker(icon, position, color, popupText) {
            var markerElement = document.createElement('div');
            markerElement.className = 'marker';

            var markerContentElement = document.createElement('div');
            markerContentElement.className = 'marker-content';
            markerContentElement.style.backgroundColor = color;
            markerElement.appendChild(markerContentElement);

            var iconElement = document.createElement('div');
            iconElement.className = 'marker-icon';
            iconElement.style.backgroundImage =
                'url(./assets/images/custom-markers/' + icon + ')';
            markerContentElement.appendChild(iconElement);

            var popup = new tt.Popup({offset: 30}).setText(popupText);
            // add marker to map
            var myMarker = new tt.Marker({element: markerElement, anchor: 'bottom'});
            myMarker.setLngLat(position)
            myMarker.setPopup(popup)
            myMarker.addTo(map);
            
            setTimeout(() => {  myMarker.remove(); }, 500);
        }
        let latitudeA;
        let longitudeA;
        //get gps co-ordinates okay
        async function requester() {
            const response = await fetch('https://zupcobustracker.herokuapp.com/gps');
            const data = await response.json();
            latitudeA = data.latitude;
            longitudeA = data.longitude;
            createMarker('frontal-taxi-cab.svg', [longitudeA, latitudeA], '#5327c3', 'SVG icon');
        }
        var intervalId = setInterval(function() {
            requester();
        }, 50);
        
        
            
        
        function RoutingAB() {
            this.state = {
                start: undefined,
                finish: undefined,
                marker: {
                    start: undefined,
                    finish: undefined
                }
            };

            this.startSearchbox = this.createSearchBox('start');
            this.createSearchBox('finish');

            this.closeButton = document.querySelector('.tt-search-box-close-icon');
            this.startSearchboxInput = this.startSearchbox.getSearchBoxHTML().querySelector('.tt-search-box-input');

            this.startSearchboxInput.addEventListener('input', this.handleSearchboxInputChange.bind(this));

            this.createMyLocationButton();
            this.switchToMyLocationButton();

            this.errorHint = new InfoHint('error', 'bottom-center', 5000)
                .addTo(document.getElementById('map'));
        }

        RoutingAB.prototype.createMyLocationButton = function() {
            this.upperSearchboxIcon = document.createElement('div');
            this.upperSearchboxIcon.setAttribute('class', 'my-location-button');

            this.upperSearchboxIcon.addEventListener('click', function() {
                navigator.geolocation.getCurrentPosition(
                    this.reverseGeocodeCurrentPosition.bind(this),
                    this.handleError.bind(this)
                );
            }.bind(this));
        };

        RoutingAB.prototype.handleSearchboxInputChange = function(event) {
            var inputContent = event.target.value;

            if (inputContent.length > 0) {
                this.setCloseButton();
            } else {
                var resultList = this.startSearchbox.getSearchBoxHTML().querySelector('.tt-search-box-result-list');

                if (resultList || inputContent.length === 0) {
                    return;
                }

                this.onResultCleared('start');
            }
        };

        RoutingAB.prototype.reverseGeocodeCurrentPosition = function(position) {
            
            this.state.start = [position.coords.longitude, position.coords.latitude];

            tt.services.reverseGeocode({
                key: 'jy6IpLAs3aODBterwGy1XccsJ8Bp3n9N',
                position: this.state.start
            })
                .then(this.handleRevGeoResponse.bind(this))
                .catch(this.handleError.bind(this));
        };

        RoutingAB.prototype.handleRevGeoResponse = function(response) {
            var place = response.addresses[0];
            this.state.start = [place.position.lng, place.position.lat];
            this.startSearchbox.setValue(place.address.freeformAddress);
            this.onResultSelected(place, 'start');
        };

        RoutingAB.prototype.calculateRoute = function() {
            if (map.getLayer('route')) {
                map.removeLayer('route');
                map.removeSource('route');
            }

            if (!this.state.start || !this.state.finish) {
                return;
            }
            this.errorHint.hide();
            var startPos = this.state.start.join(',');
            var finalPos = this.state.finish.join(',');

            tt.services.calculateRoute({
                key: 'jy6IpLAs3aODBterwGy1XccsJ8Bp3n9N',
                traffic: false,
                locations: startPos + ':' + finalPos
            })
                .then(function(response) {
                    var geojson = response.toGeoJson();
                    map.addLayer({
                        'id': 'route',
                        'type': 'line',
                        'source': {
                            'type': 'geojson',
                            'data': geojson
                        },
                        'paint': {
                            'line-color': '#2faaff',
                            'line-width': 8
                        }
                    }, this.findFirstBuildingLayerId());

                    var coordinates = geojson.features[0].geometry.coordinates;
                    this.updateRoutesBounds(coordinates);
                }.bind(this))
                .catch(this.handleError.bind(this));
        };

        RoutingAB.prototype.handleError = function(error) {
            this.errorHint.setErrorMessage(error);
        };

        RoutingAB.prototype.drawMarker = function(type, viewport) {
            if (this.state.marker[type]) {
                this.state.marker[type].remove();
            }

            var marker = document.createElement('div');
            var innerElement = document.createElement('div');

            marker.className = 'route-marker';
            innerElement.className = 'icon tt-icon -white -' + type;
            marker.appendChild(innerElement);

            this.state.marker[type] = new tt.Marker({ element: marker })
                .setLngLat(this.state[type])
                .addTo(map);

            this.updateBounds(viewport);
        };

        RoutingAB.prototype.updateBounds = function(viewport) {
            bounds = new tt.LngLatBounds();

            if (this.state.start) {
                bounds.extend(tt.LngLat.convert(this.state.start));
            }
            if (this.state.finish) {
                bounds.extend(tt.LngLat.convert(this.state.finish));
            }

            if (viewport) {
                bounds.extend(tt.LngLat.convert(viewport.topLeftPoint));
                bounds.extend(tt.LngLat.convert(viewport.btmRightPoint));
            }

            if (!bounds.isEmpty()) {
                map.fitBounds(bounds, { duration: 0, padding: 50 });
            }
        };

        RoutingAB.prototype.updateRoutesBounds = function(coordinates) {
            bounds = new tt.LngLatBounds();

            coordinates.forEach(function(point) {
                bounds.extend(tt.LngLat.convert(point));
            });

            if (!bounds.isEmpty()) {
                map.fitBounds(bounds, { duration: 0, padding: 50 });
            }
        };

        RoutingAB.prototype.createSearchBox = function(type) {
            var searchBox = new tt.plugins.SearchBox(tt.services, {
                showSearchButton: false,
                searchOptions: {
                    key: 'jy6IpLAs3aODBterwGy1XccsJ8Bp3n9N'
                },
                labels: {
                    placeholder: 'Query e.g. Washington'
                }
            });
            document.getElementById(type + 'SearchBox').appendChild(searchBox.getSearchBoxHTML());

            searchBox.on('tomtom.searchbox.resultsfound', function(event) {
                handleEnterSubmit(event, this.onResultSelected.bind(this), this.errorHint, type);
            }.bind(this));

            searchBox.on('tomtom.searchbox.resultselected', function(event) {
                if (event.data && event.data.result) {
                    this.onResultSelected(event.data.result, type);
                     
                    function getDistanceFromLatLonInKm(lat1,lon1,lat2,lon2) {
                    var R = 6371; // Radius of the earth in km
                    var dLat = deg2rad(lat2-lat1);  // deg2rad below
                    var dLon = deg2rad(lon2-lon1); 
                    var a = 
                        Math.sin(dLat/2) * Math.sin(dLat/2) +
                        Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) * 
                        Math.sin(dLon/2) * Math.sin(dLon/2); 
                    var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a)); 
                    var d = R * c; // Distance in km
                    return d;
                    }

                    function deg2rad(deg) {
                    return deg * (Math.PI/180)
                    }
                           if(cordLat==0 && cordLon==0){
                                cordLat=event.data.result.position.lat;
                                cordLon=event.data.result.position.lng;
                           }
                               // (B1) CREATE NEW HTML ELEMENT
                            var val = Math.round(getDistanceFromLatLonInKm(cordLat,cordLon,event.data.result.position.lat,event.data.result.position.lng) * 10) / 10 ;  
                            distance =val;
							dest_name = event.data.result.poi.name;
                            dest_addr = event.data.result.address.freeformAddress;
                            if(condition1!=0){
                                document.getElementById("first").removeChild(element);
                            }
							
                            element.innerHTML = event.data.result.poi.name+" "+val+" Km";
                        
                            // (B2) ATTACH TO <DIV>
                            document.getElementById("first").appendChild(element);
                            condition1=1;   
                            console.log(event.data.result.address.freeformAddress)
            
                   
                }
            }.bind(this));
            searchBox.on('tomtom.searchbox.resultscleared', this.onResultCleared.bind(this, type));

            return searchBox;
        };

        RoutingAB.prototype.onResultSelected = function(result, type) {
            var pos = result.position;
            this.state[type] = [pos.lng, pos.lat];

            if (type === 'start') {
                this.setCloseButton();
            }

            this.drawMarker(type, result.viewport);
            this.calculateRoute();
        };

        RoutingAB.prototype.onResultCleared = function(type) {
            this.state[type] = undefined;

            if (this.state.marker[type]) {
                this.state.marker[type].remove();
                this.updateBounds();
            }
            if (type === 'start') {
                this.switchToMyLocationButton();
            }

            this.calculateRoute();
        };

        RoutingAB.prototype.setCloseButton = function() {
            var inputContainer = document.querySelector('.tt-search-box-input-container');
            this.closeButton.classList.remove('-hidden');

            if (document.querySelector('.my-location-button')) {
                inputContainer.replaceChild(this.closeButton, this.upperSearchboxIcon);
            }
        };

        RoutingAB.prototype.switchToMyLocationButton = function() {
            var inputContainer = document.querySelector('.tt-search-box-input-container');
            inputContainer.replaceChild(this.upperSearchboxIcon, this.closeButton);
        };

        RoutingAB.prototype.findFirstBuildingLayerId = function() {
            var layers = map.getStyle().layers;
            for (var index in layers) {
                if (layers[index].type === 'fill-extrusion') {
                    return layers[index].id;
                }
            }

            throw new Error('Map style does not contain any layer with fill-extrusion type.');
        };
     
        new RoutingAB();

     
	</script>
	
</body>

</html>